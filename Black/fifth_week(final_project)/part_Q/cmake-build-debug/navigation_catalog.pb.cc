// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: navigation_catalog.proto

#include "navigation_catalog.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_navigation_5fcatalog_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Edge_navigation_5fcatalog_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_navigation_5fcatalog_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EdgeInfo_navigation_5fcatalog_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_navigation_5fcatalog_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_EdgeToVertexIds_navigation_5fcatalog_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_navigation_5fcatalog_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Graph_navigation_5fcatalog_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_navigation_5fcatalog_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_IncidenceList_navigation_5fcatalog_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_navigation_5fcatalog_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NavigationDataBase_StopNameToVertexIdEntry_DoNotUse_navigation_5fcatalog_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_navigation_5fcatalog_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NavigationSettings_navigation_5fcatalog_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_navigation_5fcatalog_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_VertexIds_navigation_5fcatalog_2eproto;
namespace Serializer {
class EdgeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Edge> _instance;
} _Edge_default_instance_;
class IncidenceListDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<IncidenceList> _instance;
} _IncidenceList_default_instance_;
class GraphDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Graph> _instance;
} _Graph_default_instance_;
class NavigationSettingsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NavigationSettings> _instance;
} _NavigationSettings_default_instance_;
class EdgeInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EdgeInfo> _instance;
} _EdgeInfo_default_instance_;
class VertexIdsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<VertexIds> _instance;
} _VertexIds_default_instance_;
class EdgeToVertexIdsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EdgeToVertexIds> _instance;
} _EdgeToVertexIds_default_instance_;
class NavigationDataBase_StopNameToVertexIdEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NavigationDataBase_StopNameToVertexIdEntry_DoNotUse> _instance;
} _NavigationDataBase_StopNameToVertexIdEntry_DoNotUse_default_instance_;
class NavigationDataBaseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NavigationDataBase> _instance;
} _NavigationDataBase_default_instance_;
}  // namespace Serializer
static void InitDefaultsscc_info_Edge_navigation_5fcatalog_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Serializer::_Edge_default_instance_;
    new (ptr) ::Serializer::Edge();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Serializer::Edge::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Edge_navigation_5fcatalog_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_Edge_navigation_5fcatalog_2eproto}, {}};

static void InitDefaultsscc_info_EdgeInfo_navigation_5fcatalog_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Serializer::_EdgeInfo_default_instance_;
    new (ptr) ::Serializer::EdgeInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Serializer::EdgeInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EdgeInfo_navigation_5fcatalog_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_EdgeInfo_navigation_5fcatalog_2eproto}, {}};

static void InitDefaultsscc_info_EdgeToVertexIds_navigation_5fcatalog_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Serializer::_EdgeToVertexIds_default_instance_;
    new (ptr) ::Serializer::EdgeToVertexIds();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Serializer::EdgeToVertexIds::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_EdgeToVertexIds_navigation_5fcatalog_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_EdgeToVertexIds_navigation_5fcatalog_2eproto}, {
      &scc_info_VertexIds_navigation_5fcatalog_2eproto.base,}};

static void InitDefaultsscc_info_Graph_navigation_5fcatalog_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Serializer::_Graph_default_instance_;
    new (ptr) ::Serializer::Graph();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Serializer::Graph::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Graph_navigation_5fcatalog_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_Graph_navigation_5fcatalog_2eproto}, {
      &scc_info_Edge_navigation_5fcatalog_2eproto.base,
      &scc_info_IncidenceList_navigation_5fcatalog_2eproto.base,}};

static void InitDefaultsscc_info_IncidenceList_navigation_5fcatalog_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Serializer::_IncidenceList_default_instance_;
    new (ptr) ::Serializer::IncidenceList();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Serializer::IncidenceList::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_IncidenceList_navigation_5fcatalog_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_IncidenceList_navigation_5fcatalog_2eproto}, {}};

static void InitDefaultsscc_info_NavigationDataBase_navigation_5fcatalog_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Serializer::_NavigationDataBase_default_instance_;
    new (ptr) ::Serializer::NavigationDataBase();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Serializer::NavigationDataBase::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_NavigationDataBase_navigation_5fcatalog_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 5, InitDefaultsscc_info_NavigationDataBase_navigation_5fcatalog_2eproto}, {
      &scc_info_NavigationSettings_navigation_5fcatalog_2eproto.base,
      &scc_info_NavigationDataBase_StopNameToVertexIdEntry_DoNotUse_navigation_5fcatalog_2eproto.base,
      &scc_info_EdgeInfo_navigation_5fcatalog_2eproto.base,
      &scc_info_Graph_navigation_5fcatalog_2eproto.base,
      &scc_info_EdgeToVertexIds_navigation_5fcatalog_2eproto.base,}};

static void InitDefaultsscc_info_NavigationDataBase_StopNameToVertexIdEntry_DoNotUse_navigation_5fcatalog_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Serializer::_NavigationDataBase_StopNameToVertexIdEntry_DoNotUse_default_instance_;
    new (ptr) ::Serializer::NavigationDataBase_StopNameToVertexIdEntry_DoNotUse();
  }
  ::Serializer::NavigationDataBase_StopNameToVertexIdEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NavigationDataBase_StopNameToVertexIdEntry_DoNotUse_navigation_5fcatalog_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_NavigationDataBase_StopNameToVertexIdEntry_DoNotUse_navigation_5fcatalog_2eproto}, {}};

static void InitDefaultsscc_info_NavigationSettings_navigation_5fcatalog_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Serializer::_NavigationSettings_default_instance_;
    new (ptr) ::Serializer::NavigationSettings();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Serializer::NavigationSettings::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NavigationSettings_navigation_5fcatalog_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_NavigationSettings_navigation_5fcatalog_2eproto}, {}};

static void InitDefaultsscc_info_VertexIds_navigation_5fcatalog_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Serializer::_VertexIds_default_instance_;
    new (ptr) ::Serializer::VertexIds();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Serializer::VertexIds::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_VertexIds_navigation_5fcatalog_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_VertexIds_navigation_5fcatalog_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_navigation_5fcatalog_2eproto[9];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_navigation_5fcatalog_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_navigation_5fcatalog_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_navigation_5fcatalog_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Serializer::Edge, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Serializer::Edge, from_),
  PROTOBUF_FIELD_OFFSET(::Serializer::Edge, to_),
  PROTOBUF_FIELD_OFFSET(::Serializer::Edge, weight_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Serializer::IncidenceList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Serializer::IncidenceList, incidence_list_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Serializer::Graph, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Serializer::Graph, edges_),
  PROTOBUF_FIELD_OFFSET(::Serializer::Graph, incidence_lists_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Serializer::NavigationSettings, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Serializer::NavigationSettings, bus_wait_time_),
  PROTOBUF_FIELD_OFFSET(::Serializer::NavigationSettings, bus_velocity_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Serializer::EdgeInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Serializer::EdgeInfo, bus_),
  PROTOBUF_FIELD_OFFSET(::Serializer::EdgeInfo, span_count_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Serializer::VertexIds, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Serializer::VertexIds, vertex_ids_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Serializer::EdgeToVertexIds, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Serializer::EdgeToVertexIds, id_to_vertex_ids_),
  PROTOBUF_FIELD_OFFSET(::Serializer::NavigationDataBase_StopNameToVertexIdEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Serializer::NavigationDataBase_StopNameToVertexIdEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Serializer::NavigationDataBase_StopNameToVertexIdEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::Serializer::NavigationDataBase_StopNameToVertexIdEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Serializer::NavigationDataBase, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Serializer::NavigationDataBase, settings_),
  PROTOBUF_FIELD_OFFSET(::Serializer::NavigationDataBase, stop_name_to_vertex_id_),
  PROTOBUF_FIELD_OFFSET(::Serializer::NavigationDataBase, vertex_id_to_stop_name_),
  PROTOBUF_FIELD_OFFSET(::Serializer::NavigationDataBase, edge_id_to_edge_info_),
  PROTOBUF_FIELD_OFFSET(::Serializer::NavigationDataBase, roads_graph_),
  PROTOBUF_FIELD_OFFSET(::Serializer::NavigationDataBase, edge_id_to_vertex_ids_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::Serializer::Edge)},
  { 8, -1, sizeof(::Serializer::IncidenceList)},
  { 14, -1, sizeof(::Serializer::Graph)},
  { 21, -1, sizeof(::Serializer::NavigationSettings)},
  { 28, -1, sizeof(::Serializer::EdgeInfo)},
  { 35, -1, sizeof(::Serializer::VertexIds)},
  { 41, -1, sizeof(::Serializer::EdgeToVertexIds)},
  { 47, 54, sizeof(::Serializer::NavigationDataBase_StopNameToVertexIdEntry_DoNotUse)},
  { 56, -1, sizeof(::Serializer::NavigationDataBase)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Serializer::_Edge_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Serializer::_IncidenceList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Serializer::_Graph_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Serializer::_NavigationSettings_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Serializer::_EdgeInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Serializer::_VertexIds_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Serializer::_EdgeToVertexIds_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Serializer::_NavigationDataBase_StopNameToVertexIdEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Serializer::_NavigationDataBase_default_instance_),
};

const char descriptor_table_protodef_navigation_5fcatalog_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\030navigation_catalog.proto\022\nSerializer\"0"
  "\n\004Edge\022\014\n\004from\030\001 \001(\r\022\n\n\002to\030\002 \001(\r\022\016\n\006weig"
  "ht\030\003 \001(\001\"\'\n\rIncidenceList\022\026\n\016incidence_l"
  "ist\030\001 \003(\r\"\\\n\005Graph\022\037\n\005edges\030\001 \003(\0132\020.Seri"
  "alizer.Edge\0222\n\017incidence_lists\030\002 \003(\0132\031.S"
  "erializer.IncidenceList\"A\n\022NavigationSet"
  "tings\022\025\n\rbus_wait_time\030\001 \001(\r\022\024\n\014bus_velo"
  "city\030\002 \001(\001\"+\n\010EdgeInfo\022\013\n\003bus\030\001 \001(\t\022\022\n\ns"
  "pan_count\030\002 \001(\r\"\037\n\tVertexIds\022\022\n\nvertex_i"
  "ds\030\001 \003(\r\"B\n\017EdgeToVertexIds\022/\n\020id_to_ver"
  "tex_ids\030\001 \003(\0132\025.Serializer.VertexIds\"\221\003\n"
  "\022NavigationDataBase\0220\n\010settings\030\001 \001(\0132\036."
  "Serializer.NavigationSettings\022V\n\026stop_na"
  "me_to_vertex_id\030\002 \003(\01326.Serializer.Navig"
  "ationDataBase.StopNameToVertexIdEntry\022\036\n"
  "\026vertex_id_to_stop_name\030\003 \003(\t\0222\n\024edge_id"
  "_to_edge_info\030\004 \003(\0132\024.Serializer.EdgeInf"
  "o\022&\n\013roads_graph\030\005 \001(\0132\021.Serializer.Grap"
  "h\022:\n\025edge_id_to_vertex_ids\030\006 \001(\0132\033.Seria"
  "lizer.EdgeToVertexIds\0329\n\027StopNameToVerte"
  "xIdEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\r:\0028\001"
  "b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_navigation_5fcatalog_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_navigation_5fcatalog_2eproto_sccs[9] = {
  &scc_info_Edge_navigation_5fcatalog_2eproto.base,
  &scc_info_EdgeInfo_navigation_5fcatalog_2eproto.base,
  &scc_info_EdgeToVertexIds_navigation_5fcatalog_2eproto.base,
  &scc_info_Graph_navigation_5fcatalog_2eproto.base,
  &scc_info_IncidenceList_navigation_5fcatalog_2eproto.base,
  &scc_info_NavigationDataBase_navigation_5fcatalog_2eproto.base,
  &scc_info_NavigationDataBase_StopNameToVertexIdEntry_DoNotUse_navigation_5fcatalog_2eproto.base,
  &scc_info_NavigationSettings_navigation_5fcatalog_2eproto.base,
  &scc_info_VertexIds_navigation_5fcatalog_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_navigation_5fcatalog_2eproto_once;
static bool descriptor_table_navigation_5fcatalog_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_navigation_5fcatalog_2eproto = {
  &descriptor_table_navigation_5fcatalog_2eproto_initialized, descriptor_table_protodef_navigation_5fcatalog_2eproto, "navigation_catalog.proto", 848,
  &descriptor_table_navigation_5fcatalog_2eproto_once, descriptor_table_navigation_5fcatalog_2eproto_sccs, descriptor_table_navigation_5fcatalog_2eproto_deps, 9, 0,
  schemas, file_default_instances, TableStruct_navigation_5fcatalog_2eproto::offsets,
  file_level_metadata_navigation_5fcatalog_2eproto, 9, file_level_enum_descriptors_navigation_5fcatalog_2eproto, file_level_service_descriptors_navigation_5fcatalog_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_navigation_5fcatalog_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_navigation_5fcatalog_2eproto), true);
namespace Serializer {

// ===================================================================

void Edge::InitAsDefaultInstance() {
}
class Edge::_Internal {
 public:
};

Edge::Edge()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Serializer.Edge)
}
Edge::Edge(const Edge& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&from_, &from.from_,
    static_cast<size_t>(reinterpret_cast<char*>(&weight_) -
    reinterpret_cast<char*>(&from_)) + sizeof(weight_));
  // @@protoc_insertion_point(copy_constructor:Serializer.Edge)
}

void Edge::SharedCtor() {
  ::memset(&from_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&weight_) -
      reinterpret_cast<char*>(&from_)) + sizeof(weight_));
}

Edge::~Edge() {
  // @@protoc_insertion_point(destructor:Serializer.Edge)
  SharedDtor();
}

void Edge::SharedDtor() {
}

void Edge::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Edge& Edge::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Edge_navigation_5fcatalog_2eproto.base);
  return *internal_default_instance();
}


void Edge::Clear() {
// @@protoc_insertion_point(message_clear_start:Serializer.Edge)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&from_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&weight_) -
      reinterpret_cast<char*>(&from_)) + sizeof(weight_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Edge::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 from = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          from_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 to = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          to_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double weight = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          weight_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Edge::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:Serializer.Edge)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 from = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &from_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 to = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &to_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double weight = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (25 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &weight_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Serializer.Edge)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Serializer.Edge)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Edge::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Serializer.Edge)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 from = 1;
  if (this->from() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(1, this->from(), output);
  }

  // uint32 to = 2;
  if (this->to() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(2, this->to(), output);
  }

  // double weight = 3;
  if (!(this->weight() <= 0 && this->weight() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(3, this->weight(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Serializer.Edge)
}

::PROTOBUF_NAMESPACE_ID::uint8* Edge::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Serializer.Edge)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 from = 1;
  if (this->from() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->from(), target);
  }

  // uint32 to = 2;
  if (this->to() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->to(), target);
  }

  // double weight = 3;
  if (!(this->weight() <= 0 && this->weight() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->weight(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Serializer.Edge)
  return target;
}

size_t Edge::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Serializer.Edge)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 from = 1;
  if (this->from() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->from());
  }

  // uint32 to = 2;
  if (this->to() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->to());
  }

  // double weight = 3;
  if (!(this->weight() <= 0 && this->weight() >= 0)) {
    total_size += 1 + 8;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Edge::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Serializer.Edge)
  GOOGLE_DCHECK_NE(&from, this);
  const Edge* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Edge>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Serializer.Edge)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Serializer.Edge)
    MergeFrom(*source);
  }
}

void Edge::MergeFrom(const Edge& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Serializer.Edge)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.from() != 0) {
    set_from(from.from());
  }
  if (from.to() != 0) {
    set_to(from.to());
  }
  if (!(from.weight() <= 0 && from.weight() >= 0)) {
    set_weight(from.weight());
  }
}

void Edge::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Serializer.Edge)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Edge::CopyFrom(const Edge& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Serializer.Edge)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Edge::IsInitialized() const {
  return true;
}

void Edge::InternalSwap(Edge* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(from_, other->from_);
  swap(to_, other->to_);
  swap(weight_, other->weight_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Edge::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void IncidenceList::InitAsDefaultInstance() {
}
class IncidenceList::_Internal {
 public:
};

IncidenceList::IncidenceList()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Serializer.IncidenceList)
}
IncidenceList::IncidenceList(const IncidenceList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      incidence_list_(from.incidence_list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Serializer.IncidenceList)
}

void IncidenceList::SharedCtor() {
}

IncidenceList::~IncidenceList() {
  // @@protoc_insertion_point(destructor:Serializer.IncidenceList)
  SharedDtor();
}

void IncidenceList::SharedDtor() {
}

void IncidenceList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const IncidenceList& IncidenceList::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_IncidenceList_navigation_5fcatalog_2eproto.base);
  return *internal_default_instance();
}


void IncidenceList::Clear() {
// @@protoc_insertion_point(message_clear_start:Serializer.IncidenceList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  incidence_list_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* IncidenceList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated uint32 incidence_list = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(mutable_incidence_list(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8) {
          add_incidence_list(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool IncidenceList::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:Serializer.IncidenceList)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 incidence_list = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_incidence_list())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 1, 10u, input, this->mutable_incidence_list())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Serializer.IncidenceList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Serializer.IncidenceList)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void IncidenceList::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Serializer.IncidenceList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 incidence_list = 1;
  if (this->incidence_list_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(1, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_incidence_list_cached_byte_size_.load(
        std::memory_order_relaxed));
  }
  for (int i = 0, n = this->incidence_list_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32NoTag(
      this->incidence_list(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Serializer.IncidenceList)
}

::PROTOBUF_NAMESPACE_ID::uint8* IncidenceList::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Serializer.IncidenceList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 incidence_list = 1;
  if (this->incidence_list_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      1,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _incidence_list_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->incidence_list_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Serializer.IncidenceList)
  return target;
}

size_t IncidenceList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Serializer.IncidenceList)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 incidence_list = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->incidence_list_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _incidence_list_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IncidenceList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Serializer.IncidenceList)
  GOOGLE_DCHECK_NE(&from, this);
  const IncidenceList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<IncidenceList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Serializer.IncidenceList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Serializer.IncidenceList)
    MergeFrom(*source);
  }
}

void IncidenceList::MergeFrom(const IncidenceList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Serializer.IncidenceList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  incidence_list_.MergeFrom(from.incidence_list_);
}

void IncidenceList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Serializer.IncidenceList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IncidenceList::CopyFrom(const IncidenceList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Serializer.IncidenceList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IncidenceList::IsInitialized() const {
  return true;
}

void IncidenceList::InternalSwap(IncidenceList* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  incidence_list_.InternalSwap(&other->incidence_list_);
}

::PROTOBUF_NAMESPACE_ID::Metadata IncidenceList::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Graph::InitAsDefaultInstance() {
}
class Graph::_Internal {
 public:
};

Graph::Graph()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Serializer.Graph)
}
Graph::Graph(const Graph& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      edges_(from.edges_),
      incidence_lists_(from.incidence_lists_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Serializer.Graph)
}

void Graph::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Graph_navigation_5fcatalog_2eproto.base);
}

Graph::~Graph() {
  // @@protoc_insertion_point(destructor:Serializer.Graph)
  SharedDtor();
}

void Graph::SharedDtor() {
}

void Graph::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Graph& Graph::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Graph_navigation_5fcatalog_2eproto.base);
  return *internal_default_instance();
}


void Graph::Clear() {
// @@protoc_insertion_point(message_clear_start:Serializer.Graph)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  edges_.Clear();
  incidence_lists_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Graph::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .Serializer.Edge edges = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_edges(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      // repeated .Serializer.IncidenceList incidence_lists = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_incidence_lists(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Graph::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:Serializer.Graph)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Serializer.Edge edges = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_edges()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .Serializer.IncidenceList incidence_lists = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_incidence_lists()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Serializer.Graph)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Serializer.Graph)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Graph::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Serializer.Graph)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Serializer.Edge edges = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->edges_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->edges(static_cast<int>(i)),
      output);
  }

  // repeated .Serializer.IncidenceList incidence_lists = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->incidence_lists_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->incidence_lists(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Serializer.Graph)
}

::PROTOBUF_NAMESPACE_ID::uint8* Graph::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Serializer.Graph)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Serializer.Edge edges = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->edges_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->edges(static_cast<int>(i)), target);
  }

  // repeated .Serializer.IncidenceList incidence_lists = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->incidence_lists_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->incidence_lists(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Serializer.Graph)
  return target;
}

size_t Graph::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Serializer.Graph)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Serializer.Edge edges = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->edges_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->edges(static_cast<int>(i)));
    }
  }

  // repeated .Serializer.IncidenceList incidence_lists = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->incidence_lists_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->incidence_lists(static_cast<int>(i)));
    }
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Graph::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Serializer.Graph)
  GOOGLE_DCHECK_NE(&from, this);
  const Graph* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Graph>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Serializer.Graph)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Serializer.Graph)
    MergeFrom(*source);
  }
}

void Graph::MergeFrom(const Graph& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Serializer.Graph)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  edges_.MergeFrom(from.edges_);
  incidence_lists_.MergeFrom(from.incidence_lists_);
}

void Graph::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Serializer.Graph)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Graph::CopyFrom(const Graph& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Serializer.Graph)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Graph::IsInitialized() const {
  return true;
}

void Graph::InternalSwap(Graph* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&edges_)->InternalSwap(CastToBase(&other->edges_));
  CastToBase(&incidence_lists_)->InternalSwap(CastToBase(&other->incidence_lists_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Graph::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void NavigationSettings::InitAsDefaultInstance() {
}
class NavigationSettings::_Internal {
 public:
};

NavigationSettings::NavigationSettings()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Serializer.NavigationSettings)
}
NavigationSettings::NavigationSettings(const NavigationSettings& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&bus_velocity_, &from.bus_velocity_,
    static_cast<size_t>(reinterpret_cast<char*>(&bus_wait_time_) -
    reinterpret_cast<char*>(&bus_velocity_)) + sizeof(bus_wait_time_));
  // @@protoc_insertion_point(copy_constructor:Serializer.NavigationSettings)
}

void NavigationSettings::SharedCtor() {
  ::memset(&bus_velocity_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&bus_wait_time_) -
      reinterpret_cast<char*>(&bus_velocity_)) + sizeof(bus_wait_time_));
}

NavigationSettings::~NavigationSettings() {
  // @@protoc_insertion_point(destructor:Serializer.NavigationSettings)
  SharedDtor();
}

void NavigationSettings::SharedDtor() {
}

void NavigationSettings::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NavigationSettings& NavigationSettings::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NavigationSettings_navigation_5fcatalog_2eproto.base);
  return *internal_default_instance();
}


void NavigationSettings::Clear() {
// @@protoc_insertion_point(message_clear_start:Serializer.NavigationSettings)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&bus_velocity_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&bus_wait_time_) -
      reinterpret_cast<char*>(&bus_velocity_)) + sizeof(bus_wait_time_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* NavigationSettings::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 bus_wait_time = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          bus_wait_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double bus_velocity = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          bus_velocity_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool NavigationSettings::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:Serializer.NavigationSettings)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 bus_wait_time = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bus_wait_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double bus_velocity = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (17 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &bus_velocity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Serializer.NavigationSettings)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Serializer.NavigationSettings)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void NavigationSettings::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Serializer.NavigationSettings)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 bus_wait_time = 1;
  if (this->bus_wait_time() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(1, this->bus_wait_time(), output);
  }

  // double bus_velocity = 2;
  if (!(this->bus_velocity() <= 0 && this->bus_velocity() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(2, this->bus_velocity(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Serializer.NavigationSettings)
}

::PROTOBUF_NAMESPACE_ID::uint8* NavigationSettings::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Serializer.NavigationSettings)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 bus_wait_time = 1;
  if (this->bus_wait_time() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->bus_wait_time(), target);
  }

  // double bus_velocity = 2;
  if (!(this->bus_velocity() <= 0 && this->bus_velocity() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->bus_velocity(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Serializer.NavigationSettings)
  return target;
}

size_t NavigationSettings::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Serializer.NavigationSettings)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double bus_velocity = 2;
  if (!(this->bus_velocity() <= 0 && this->bus_velocity() >= 0)) {
    total_size += 1 + 8;
  }

  // uint32 bus_wait_time = 1;
  if (this->bus_wait_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->bus_wait_time());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NavigationSettings::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Serializer.NavigationSettings)
  GOOGLE_DCHECK_NE(&from, this);
  const NavigationSettings* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NavigationSettings>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Serializer.NavigationSettings)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Serializer.NavigationSettings)
    MergeFrom(*source);
  }
}

void NavigationSettings::MergeFrom(const NavigationSettings& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Serializer.NavigationSettings)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.bus_velocity() <= 0 && from.bus_velocity() >= 0)) {
    set_bus_velocity(from.bus_velocity());
  }
  if (from.bus_wait_time() != 0) {
    set_bus_wait_time(from.bus_wait_time());
  }
}

void NavigationSettings::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Serializer.NavigationSettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NavigationSettings::CopyFrom(const NavigationSettings& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Serializer.NavigationSettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NavigationSettings::IsInitialized() const {
  return true;
}

void NavigationSettings::InternalSwap(NavigationSettings* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(bus_velocity_, other->bus_velocity_);
  swap(bus_wait_time_, other->bus_wait_time_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NavigationSettings::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void EdgeInfo::InitAsDefaultInstance() {
}
class EdgeInfo::_Internal {
 public:
};

EdgeInfo::EdgeInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Serializer.EdgeInfo)
}
EdgeInfo::EdgeInfo(const EdgeInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  bus_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.bus().empty()) {
    bus_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.bus_);
  }
  span_count_ = from.span_count_;
  // @@protoc_insertion_point(copy_constructor:Serializer.EdgeInfo)
}

void EdgeInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_EdgeInfo_navigation_5fcatalog_2eproto.base);
  bus_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  span_count_ = 0u;
}

EdgeInfo::~EdgeInfo() {
  // @@protoc_insertion_point(destructor:Serializer.EdgeInfo)
  SharedDtor();
}

void EdgeInfo::SharedDtor() {
  bus_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void EdgeInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EdgeInfo& EdgeInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EdgeInfo_navigation_5fcatalog_2eproto.base);
  return *internal_default_instance();
}


void EdgeInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:Serializer.EdgeInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  bus_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  span_count_ = 0u;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* EdgeInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string bus = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_bus(), ptr, ctx, "Serializer.EdgeInfo.bus");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 span_count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          span_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool EdgeInfo::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:Serializer.EdgeInfo)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string bus = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_bus()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->bus().data(), static_cast<int>(this->bus().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "Serializer.EdgeInfo.bus"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 span_count = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &span_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Serializer.EdgeInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Serializer.EdgeInfo)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void EdgeInfo::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Serializer.EdgeInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string bus = 1;
  if (this->bus().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->bus().data(), static_cast<int>(this->bus().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Serializer.EdgeInfo.bus");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->bus(), output);
  }

  // uint32 span_count = 2;
  if (this->span_count() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(2, this->span_count(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Serializer.EdgeInfo)
}

::PROTOBUF_NAMESPACE_ID::uint8* EdgeInfo::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Serializer.EdgeInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string bus = 1;
  if (this->bus().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->bus().data(), static_cast<int>(this->bus().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Serializer.EdgeInfo.bus");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->bus(), target);
  }

  // uint32 span_count = 2;
  if (this->span_count() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->span_count(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Serializer.EdgeInfo)
  return target;
}

size_t EdgeInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Serializer.EdgeInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string bus = 1;
  if (this->bus().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->bus());
  }

  // uint32 span_count = 2;
  if (this->span_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->span_count());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EdgeInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Serializer.EdgeInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const EdgeInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EdgeInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Serializer.EdgeInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Serializer.EdgeInfo)
    MergeFrom(*source);
  }
}

void EdgeInfo::MergeFrom(const EdgeInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Serializer.EdgeInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.bus().size() > 0) {

    bus_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.bus_);
  }
  if (from.span_count() != 0) {
    set_span_count(from.span_count());
  }
}

void EdgeInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Serializer.EdgeInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EdgeInfo::CopyFrom(const EdgeInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Serializer.EdgeInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EdgeInfo::IsInitialized() const {
  return true;
}

void EdgeInfo::InternalSwap(EdgeInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  bus_.Swap(&other->bus_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(span_count_, other->span_count_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EdgeInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void VertexIds::InitAsDefaultInstance() {
}
class VertexIds::_Internal {
 public:
};

VertexIds::VertexIds()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Serializer.VertexIds)
}
VertexIds::VertexIds(const VertexIds& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      vertex_ids_(from.vertex_ids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Serializer.VertexIds)
}

void VertexIds::SharedCtor() {
}

VertexIds::~VertexIds() {
  // @@protoc_insertion_point(destructor:Serializer.VertexIds)
  SharedDtor();
}

void VertexIds::SharedDtor() {
}

void VertexIds::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const VertexIds& VertexIds::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_VertexIds_navigation_5fcatalog_2eproto.base);
  return *internal_default_instance();
}


void VertexIds::Clear() {
// @@protoc_insertion_point(message_clear_start:Serializer.VertexIds)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  vertex_ids_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* VertexIds::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated uint32 vertex_ids = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(mutable_vertex_ids(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8) {
          add_vertex_ids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool VertexIds::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:Serializer.VertexIds)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 vertex_ids = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_vertex_ids())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 1, 10u, input, this->mutable_vertex_ids())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Serializer.VertexIds)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Serializer.VertexIds)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void VertexIds::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Serializer.VertexIds)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 vertex_ids = 1;
  if (this->vertex_ids_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(1, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_vertex_ids_cached_byte_size_.load(
        std::memory_order_relaxed));
  }
  for (int i = 0, n = this->vertex_ids_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32NoTag(
      this->vertex_ids(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Serializer.VertexIds)
}

::PROTOBUF_NAMESPACE_ID::uint8* VertexIds::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Serializer.VertexIds)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 vertex_ids = 1;
  if (this->vertex_ids_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      1,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _vertex_ids_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->vertex_ids_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Serializer.VertexIds)
  return target;
}

size_t VertexIds::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Serializer.VertexIds)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 vertex_ids = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->vertex_ids_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _vertex_ids_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VertexIds::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Serializer.VertexIds)
  GOOGLE_DCHECK_NE(&from, this);
  const VertexIds* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VertexIds>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Serializer.VertexIds)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Serializer.VertexIds)
    MergeFrom(*source);
  }
}

void VertexIds::MergeFrom(const VertexIds& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Serializer.VertexIds)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  vertex_ids_.MergeFrom(from.vertex_ids_);
}

void VertexIds::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Serializer.VertexIds)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VertexIds::CopyFrom(const VertexIds& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Serializer.VertexIds)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VertexIds::IsInitialized() const {
  return true;
}

void VertexIds::InternalSwap(VertexIds* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  vertex_ids_.InternalSwap(&other->vertex_ids_);
}

::PROTOBUF_NAMESPACE_ID::Metadata VertexIds::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void EdgeToVertexIds::InitAsDefaultInstance() {
}
class EdgeToVertexIds::_Internal {
 public:
};

EdgeToVertexIds::EdgeToVertexIds()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Serializer.EdgeToVertexIds)
}
EdgeToVertexIds::EdgeToVertexIds(const EdgeToVertexIds& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      id_to_vertex_ids_(from.id_to_vertex_ids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Serializer.EdgeToVertexIds)
}

void EdgeToVertexIds::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_EdgeToVertexIds_navigation_5fcatalog_2eproto.base);
}

EdgeToVertexIds::~EdgeToVertexIds() {
  // @@protoc_insertion_point(destructor:Serializer.EdgeToVertexIds)
  SharedDtor();
}

void EdgeToVertexIds::SharedDtor() {
}

void EdgeToVertexIds::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EdgeToVertexIds& EdgeToVertexIds::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EdgeToVertexIds_navigation_5fcatalog_2eproto.base);
  return *internal_default_instance();
}


void EdgeToVertexIds::Clear() {
// @@protoc_insertion_point(message_clear_start:Serializer.EdgeToVertexIds)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_to_vertex_ids_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* EdgeToVertexIds::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .Serializer.VertexIds id_to_vertex_ids = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_id_to_vertex_ids(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool EdgeToVertexIds::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:Serializer.EdgeToVertexIds)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Serializer.VertexIds id_to_vertex_ids = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_id_to_vertex_ids()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Serializer.EdgeToVertexIds)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Serializer.EdgeToVertexIds)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void EdgeToVertexIds::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Serializer.EdgeToVertexIds)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Serializer.VertexIds id_to_vertex_ids = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->id_to_vertex_ids_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->id_to_vertex_ids(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Serializer.EdgeToVertexIds)
}

::PROTOBUF_NAMESPACE_ID::uint8* EdgeToVertexIds::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Serializer.EdgeToVertexIds)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Serializer.VertexIds id_to_vertex_ids = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->id_to_vertex_ids_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->id_to_vertex_ids(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Serializer.EdgeToVertexIds)
  return target;
}

size_t EdgeToVertexIds::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Serializer.EdgeToVertexIds)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Serializer.VertexIds id_to_vertex_ids = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->id_to_vertex_ids_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->id_to_vertex_ids(static_cast<int>(i)));
    }
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EdgeToVertexIds::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Serializer.EdgeToVertexIds)
  GOOGLE_DCHECK_NE(&from, this);
  const EdgeToVertexIds* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EdgeToVertexIds>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Serializer.EdgeToVertexIds)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Serializer.EdgeToVertexIds)
    MergeFrom(*source);
  }
}

void EdgeToVertexIds::MergeFrom(const EdgeToVertexIds& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Serializer.EdgeToVertexIds)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  id_to_vertex_ids_.MergeFrom(from.id_to_vertex_ids_);
}

void EdgeToVertexIds::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Serializer.EdgeToVertexIds)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EdgeToVertexIds::CopyFrom(const EdgeToVertexIds& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Serializer.EdgeToVertexIds)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EdgeToVertexIds::IsInitialized() const {
  return true;
}

void EdgeToVertexIds::InternalSwap(EdgeToVertexIds* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&id_to_vertex_ids_)->InternalSwap(CastToBase(&other->id_to_vertex_ids_));
}

::PROTOBUF_NAMESPACE_ID::Metadata EdgeToVertexIds::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

NavigationDataBase_StopNameToVertexIdEntry_DoNotUse::NavigationDataBase_StopNameToVertexIdEntry_DoNotUse() {}
NavigationDataBase_StopNameToVertexIdEntry_DoNotUse::NavigationDataBase_StopNameToVertexIdEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void NavigationDataBase_StopNameToVertexIdEntry_DoNotUse::MergeFrom(const NavigationDataBase_StopNameToVertexIdEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata NavigationDataBase_StopNameToVertexIdEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void NavigationDataBase_StopNameToVertexIdEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void NavigationDataBase::InitAsDefaultInstance() {
  ::Serializer::_NavigationDataBase_default_instance_._instance.get_mutable()->settings_ = const_cast< ::Serializer::NavigationSettings*>(
      ::Serializer::NavigationSettings::internal_default_instance());
  ::Serializer::_NavigationDataBase_default_instance_._instance.get_mutable()->roads_graph_ = const_cast< ::Serializer::Graph*>(
      ::Serializer::Graph::internal_default_instance());
  ::Serializer::_NavigationDataBase_default_instance_._instance.get_mutable()->edge_id_to_vertex_ids_ = const_cast< ::Serializer::EdgeToVertexIds*>(
      ::Serializer::EdgeToVertexIds::internal_default_instance());
}
class NavigationDataBase::_Internal {
 public:
  static const ::Serializer::NavigationSettings& settings(const NavigationDataBase* msg);
  static const ::Serializer::Graph& roads_graph(const NavigationDataBase* msg);
  static const ::Serializer::EdgeToVertexIds& edge_id_to_vertex_ids(const NavigationDataBase* msg);
};

const ::Serializer::NavigationSettings&
NavigationDataBase::_Internal::settings(const NavigationDataBase* msg) {
  return *msg->settings_;
}
const ::Serializer::Graph&
NavigationDataBase::_Internal::roads_graph(const NavigationDataBase* msg) {
  return *msg->roads_graph_;
}
const ::Serializer::EdgeToVertexIds&
NavigationDataBase::_Internal::edge_id_to_vertex_ids(const NavigationDataBase* msg) {
  return *msg->edge_id_to_vertex_ids_;
}
NavigationDataBase::NavigationDataBase()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Serializer.NavigationDataBase)
}
NavigationDataBase::NavigationDataBase(const NavigationDataBase& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      vertex_id_to_stop_name_(from.vertex_id_to_stop_name_),
      edge_id_to_edge_info_(from.edge_id_to_edge_info_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  stop_name_to_vertex_id_.MergeFrom(from.stop_name_to_vertex_id_);
  if (from.has_settings()) {
    settings_ = new ::Serializer::NavigationSettings(*from.settings_);
  } else {
    settings_ = nullptr;
  }
  if (from.has_roads_graph()) {
    roads_graph_ = new ::Serializer::Graph(*from.roads_graph_);
  } else {
    roads_graph_ = nullptr;
  }
  if (from.has_edge_id_to_vertex_ids()) {
    edge_id_to_vertex_ids_ = new ::Serializer::EdgeToVertexIds(*from.edge_id_to_vertex_ids_);
  } else {
    edge_id_to_vertex_ids_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:Serializer.NavigationDataBase)
}

void NavigationDataBase::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_NavigationDataBase_navigation_5fcatalog_2eproto.base);
  ::memset(&settings_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&edge_id_to_vertex_ids_) -
      reinterpret_cast<char*>(&settings_)) + sizeof(edge_id_to_vertex_ids_));
}

NavigationDataBase::~NavigationDataBase() {
  // @@protoc_insertion_point(destructor:Serializer.NavigationDataBase)
  SharedDtor();
}

void NavigationDataBase::SharedDtor() {
  if (this != internal_default_instance()) delete settings_;
  if (this != internal_default_instance()) delete roads_graph_;
  if (this != internal_default_instance()) delete edge_id_to_vertex_ids_;
}

void NavigationDataBase::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NavigationDataBase& NavigationDataBase::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NavigationDataBase_navigation_5fcatalog_2eproto.base);
  return *internal_default_instance();
}


void NavigationDataBase::Clear() {
// @@protoc_insertion_point(message_clear_start:Serializer.NavigationDataBase)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  stop_name_to_vertex_id_.Clear();
  vertex_id_to_stop_name_.Clear();
  edge_id_to_edge_info_.Clear();
  if (GetArenaNoVirtual() == nullptr && settings_ != nullptr) {
    delete settings_;
  }
  settings_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && roads_graph_ != nullptr) {
    delete roads_graph_;
  }
  roads_graph_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && edge_id_to_vertex_ids_ != nullptr) {
    delete edge_id_to_vertex_ids_;
  }
  edge_id_to_vertex_ids_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* NavigationDataBase::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .Serializer.NavigationSettings settings = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_settings(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<string, uint32> stop_name_to_vertex_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&stop_name_to_vertex_id_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      // repeated string vertex_id_to_stop_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(add_vertex_id_to_stop_name(), ptr, ctx, "Serializer.NavigationDataBase.vertex_id_to_stop_name");
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 26);
        } else goto handle_unusual;
        continue;
      // repeated .Serializer.EdgeInfo edge_id_to_edge_info = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_edge_id_to_edge_info(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 34);
        } else goto handle_unusual;
        continue;
      // .Serializer.Graph roads_graph = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(mutable_roads_graph(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Serializer.EdgeToVertexIds edge_id_to_vertex_ids = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(mutable_edge_id_to_vertex_ids(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool NavigationDataBase::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:Serializer.NavigationDataBase)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .Serializer.NavigationSettings settings = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_settings()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, uint32> stop_name_to_vertex_id = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          NavigationDataBase_StopNameToVertexIdEntry_DoNotUse::Parser< ::PROTOBUF_NAMESPACE_ID::internal::MapField<
              NavigationDataBase_StopNameToVertexIdEntry_DoNotUse,
              std::string, ::PROTOBUF_NAMESPACE_ID::uint32,
              ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
              ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
              0 >,
            ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::uint32 > > parser(&stop_name_to_vertex_id_);
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "Serializer.NavigationDataBase.StopNameToVertexIdEntry.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string vertex_id_to_stop_name = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->add_vertex_id_to_stop_name()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->vertex_id_to_stop_name(this->vertex_id_to_stop_name_size() - 1).data(),
            static_cast<int>(this->vertex_id_to_stop_name(this->vertex_id_to_stop_name_size() - 1).length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "Serializer.NavigationDataBase.vertex_id_to_stop_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .Serializer.EdgeInfo edge_id_to_edge_info = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_edge_id_to_edge_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Serializer.Graph roads_graph = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_roads_graph()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Serializer.EdgeToVertexIds edge_id_to_vertex_ids = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_edge_id_to_vertex_ids()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Serializer.NavigationDataBase)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Serializer.NavigationDataBase)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void NavigationDataBase::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Serializer.NavigationDataBase)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Serializer.NavigationSettings settings = 1;
  if (this->has_settings()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::settings(this), output);
  }

  // map<string, uint32> stop_name_to_vertex_id = 2;
  if (!this->stop_name_to_vertex_id().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::uint32 >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "Serializer.NavigationDataBase.StopNameToVertexIdEntry.key");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->stop_name_to_vertex_id().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->stop_name_to_vertex_id().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::uint32 >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::uint32 >::const_iterator
          it = this->stop_name_to_vertex_id().begin();
          it != this->stop_name_to_vertex_id().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        NavigationDataBase_StopNameToVertexIdEntry_DoNotUse::Funcs::SerializeToCodedStream(2, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, output);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::uint32 >::const_iterator
          it = this->stop_name_to_vertex_id().begin();
          it != this->stop_name_to_vertex_id().end(); ++it) {
        NavigationDataBase_StopNameToVertexIdEntry_DoNotUse::Funcs::SerializeToCodedStream(2, it->first, it->second, output);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // repeated string vertex_id_to_stop_name = 3;
  for (int i = 0, n = this->vertex_id_to_stop_name_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->vertex_id_to_stop_name(i).data(), static_cast<int>(this->vertex_id_to_stop_name(i).length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Serializer.NavigationDataBase.vertex_id_to_stop_name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteString(
      3, this->vertex_id_to_stop_name(i), output);
  }

  // repeated .Serializer.EdgeInfo edge_id_to_edge_info = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->edge_id_to_edge_info_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      4,
      this->edge_id_to_edge_info(static_cast<int>(i)),
      output);
  }

  // .Serializer.Graph roads_graph = 5;
  if (this->has_roads_graph()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, _Internal::roads_graph(this), output);
  }

  // .Serializer.EdgeToVertexIds edge_id_to_vertex_ids = 6;
  if (this->has_edge_id_to_vertex_ids()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, _Internal::edge_id_to_vertex_ids(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Serializer.NavigationDataBase)
}

::PROTOBUF_NAMESPACE_ID::uint8* NavigationDataBase::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Serializer.NavigationDataBase)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Serializer.NavigationSettings settings = 1;
  if (this->has_settings()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::settings(this), target);
  }

  // map<string, uint32> stop_name_to_vertex_id = 2;
  if (!this->stop_name_to_vertex_id().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::uint32 >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "Serializer.NavigationDataBase.StopNameToVertexIdEntry.key");
      }
    };

    if (false &&
        this->stop_name_to_vertex_id().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->stop_name_to_vertex_id().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::uint32 >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::uint32 >::const_iterator
          it = this->stop_name_to_vertex_id().begin();
          it != this->stop_name_to_vertex_id().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = NavigationDataBase_StopNameToVertexIdEntry_DoNotUse::Funcs::SerializeToArray(2, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::uint32 >::const_iterator
          it = this->stop_name_to_vertex_id().begin();
          it != this->stop_name_to_vertex_id().end(); ++it) {
        target = NavigationDataBase_StopNameToVertexIdEntry_DoNotUse::Funcs::SerializeToArray(2, it->first, it->second, target);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // repeated string vertex_id_to_stop_name = 3;
  for (int i = 0, n = this->vertex_id_to_stop_name_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->vertex_id_to_stop_name(i).data(), static_cast<int>(this->vertex_id_to_stop_name(i).length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Serializer.NavigationDataBase.vertex_id_to_stop_name");
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteStringToArray(3, this->vertex_id_to_stop_name(i), target);
  }

  // repeated .Serializer.EdgeInfo edge_id_to_edge_info = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->edge_id_to_edge_info_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->edge_id_to_edge_info(static_cast<int>(i)), target);
  }

  // .Serializer.Graph roads_graph = 5;
  if (this->has_roads_graph()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, _Internal::roads_graph(this), target);
  }

  // .Serializer.EdgeToVertexIds edge_id_to_vertex_ids = 6;
  if (this->has_edge_id_to_vertex_ids()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, _Internal::edge_id_to_vertex_ids(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Serializer.NavigationDataBase)
  return target;
}

size_t NavigationDataBase::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Serializer.NavigationDataBase)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, uint32> stop_name_to_vertex_id = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->stop_name_to_vertex_id_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::uint32 >::const_iterator
      it = this->stop_name_to_vertex_id().begin();
      it != this->stop_name_to_vertex_id().end(); ++it) {
    total_size += NavigationDataBase_StopNameToVertexIdEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // repeated string vertex_id_to_stop_name = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->vertex_id_to_stop_name_size());
  for (int i = 0, n = this->vertex_id_to_stop_name_size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      this->vertex_id_to_stop_name(i));
  }

  // repeated .Serializer.EdgeInfo edge_id_to_edge_info = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->edge_id_to_edge_info_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->edge_id_to_edge_info(static_cast<int>(i)));
    }
  }

  // .Serializer.NavigationSettings settings = 1;
  if (this->has_settings()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *settings_);
  }

  // .Serializer.Graph roads_graph = 5;
  if (this->has_roads_graph()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *roads_graph_);
  }

  // .Serializer.EdgeToVertexIds edge_id_to_vertex_ids = 6;
  if (this->has_edge_id_to_vertex_ids()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *edge_id_to_vertex_ids_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NavigationDataBase::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Serializer.NavigationDataBase)
  GOOGLE_DCHECK_NE(&from, this);
  const NavigationDataBase* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NavigationDataBase>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Serializer.NavigationDataBase)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Serializer.NavigationDataBase)
    MergeFrom(*source);
  }
}

void NavigationDataBase::MergeFrom(const NavigationDataBase& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Serializer.NavigationDataBase)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  stop_name_to_vertex_id_.MergeFrom(from.stop_name_to_vertex_id_);
  vertex_id_to_stop_name_.MergeFrom(from.vertex_id_to_stop_name_);
  edge_id_to_edge_info_.MergeFrom(from.edge_id_to_edge_info_);
  if (from.has_settings()) {
    mutable_settings()->::Serializer::NavigationSettings::MergeFrom(from.settings());
  }
  if (from.has_roads_graph()) {
    mutable_roads_graph()->::Serializer::Graph::MergeFrom(from.roads_graph());
  }
  if (from.has_edge_id_to_vertex_ids()) {
    mutable_edge_id_to_vertex_ids()->::Serializer::EdgeToVertexIds::MergeFrom(from.edge_id_to_vertex_ids());
  }
}

void NavigationDataBase::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Serializer.NavigationDataBase)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NavigationDataBase::CopyFrom(const NavigationDataBase& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Serializer.NavigationDataBase)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NavigationDataBase::IsInitialized() const {
  return true;
}

void NavigationDataBase::InternalSwap(NavigationDataBase* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  stop_name_to_vertex_id_.Swap(&other->stop_name_to_vertex_id_);
  vertex_id_to_stop_name_.InternalSwap(CastToBase(&other->vertex_id_to_stop_name_));
  CastToBase(&edge_id_to_edge_info_)->InternalSwap(CastToBase(&other->edge_id_to_edge_info_));
  swap(settings_, other->settings_);
  swap(roads_graph_, other->roads_graph_);
  swap(edge_id_to_vertex_ids_, other->edge_id_to_vertex_ids_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NavigationDataBase::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace Serializer
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::Serializer::Edge* Arena::CreateMaybeMessage< ::Serializer::Edge >(Arena* arena) {
  return Arena::CreateInternal< ::Serializer::Edge >(arena);
}
template<> PROTOBUF_NOINLINE ::Serializer::IncidenceList* Arena::CreateMaybeMessage< ::Serializer::IncidenceList >(Arena* arena) {
  return Arena::CreateInternal< ::Serializer::IncidenceList >(arena);
}
template<> PROTOBUF_NOINLINE ::Serializer::Graph* Arena::CreateMaybeMessage< ::Serializer::Graph >(Arena* arena) {
  return Arena::CreateInternal< ::Serializer::Graph >(arena);
}
template<> PROTOBUF_NOINLINE ::Serializer::NavigationSettings* Arena::CreateMaybeMessage< ::Serializer::NavigationSettings >(Arena* arena) {
  return Arena::CreateInternal< ::Serializer::NavigationSettings >(arena);
}
template<> PROTOBUF_NOINLINE ::Serializer::EdgeInfo* Arena::CreateMaybeMessage< ::Serializer::EdgeInfo >(Arena* arena) {
  return Arena::CreateInternal< ::Serializer::EdgeInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::Serializer::VertexIds* Arena::CreateMaybeMessage< ::Serializer::VertexIds >(Arena* arena) {
  return Arena::CreateInternal< ::Serializer::VertexIds >(arena);
}
template<> PROTOBUF_NOINLINE ::Serializer::EdgeToVertexIds* Arena::CreateMaybeMessage< ::Serializer::EdgeToVertexIds >(Arena* arena) {
  return Arena::CreateInternal< ::Serializer::EdgeToVertexIds >(arena);
}
template<> PROTOBUF_NOINLINE ::Serializer::NavigationDataBase_StopNameToVertexIdEntry_DoNotUse* Arena::CreateMaybeMessage< ::Serializer::NavigationDataBase_StopNameToVertexIdEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::Serializer::NavigationDataBase_StopNameToVertexIdEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::Serializer::NavigationDataBase* Arena::CreateMaybeMessage< ::Serializer::NavigationDataBase >(Arena* arena) {
  return Arena::CreateInternal< ::Serializer::NavigationDataBase >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
