// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: navigation_catalog.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_navigation_5fcatalog_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_navigation_5fcatalog_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_navigation_5fcatalog_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_navigation_5fcatalog_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[9]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_navigation_5fcatalog_2eproto;
namespace Serializer {
class Edge;
class EdgeDefaultTypeInternal;
extern EdgeDefaultTypeInternal _Edge_default_instance_;
class EdgeInfo;
class EdgeInfoDefaultTypeInternal;
extern EdgeInfoDefaultTypeInternal _EdgeInfo_default_instance_;
class EdgeToVertexIds;
class EdgeToVertexIdsDefaultTypeInternal;
extern EdgeToVertexIdsDefaultTypeInternal _EdgeToVertexIds_default_instance_;
class Graph;
class GraphDefaultTypeInternal;
extern GraphDefaultTypeInternal _Graph_default_instance_;
class IncidenceList;
class IncidenceListDefaultTypeInternal;
extern IncidenceListDefaultTypeInternal _IncidenceList_default_instance_;
class NavigationDataBase;
class NavigationDataBaseDefaultTypeInternal;
extern NavigationDataBaseDefaultTypeInternal _NavigationDataBase_default_instance_;
class NavigationDataBase_StopNameToVertexIdEntry_DoNotUse;
class NavigationDataBase_StopNameToVertexIdEntry_DoNotUseDefaultTypeInternal;
extern NavigationDataBase_StopNameToVertexIdEntry_DoNotUseDefaultTypeInternal _NavigationDataBase_StopNameToVertexIdEntry_DoNotUse_default_instance_;
class NavigationSettings;
class NavigationSettingsDefaultTypeInternal;
extern NavigationSettingsDefaultTypeInternal _NavigationSettings_default_instance_;
class VertexIds;
class VertexIdsDefaultTypeInternal;
extern VertexIdsDefaultTypeInternal _VertexIds_default_instance_;
}  // namespace Serializer
PROTOBUF_NAMESPACE_OPEN
template<> ::Serializer::Edge* Arena::CreateMaybeMessage<::Serializer::Edge>(Arena*);
template<> ::Serializer::EdgeInfo* Arena::CreateMaybeMessage<::Serializer::EdgeInfo>(Arena*);
template<> ::Serializer::EdgeToVertexIds* Arena::CreateMaybeMessage<::Serializer::EdgeToVertexIds>(Arena*);
template<> ::Serializer::Graph* Arena::CreateMaybeMessage<::Serializer::Graph>(Arena*);
template<> ::Serializer::IncidenceList* Arena::CreateMaybeMessage<::Serializer::IncidenceList>(Arena*);
template<> ::Serializer::NavigationDataBase* Arena::CreateMaybeMessage<::Serializer::NavigationDataBase>(Arena*);
template<> ::Serializer::NavigationDataBase_StopNameToVertexIdEntry_DoNotUse* Arena::CreateMaybeMessage<::Serializer::NavigationDataBase_StopNameToVertexIdEntry_DoNotUse>(Arena*);
template<> ::Serializer::NavigationSettings* Arena::CreateMaybeMessage<::Serializer::NavigationSettings>(Arena*);
template<> ::Serializer::VertexIds* Arena::CreateMaybeMessage<::Serializer::VertexIds>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Serializer {

// ===================================================================

class Edge :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Serializer.Edge) */ {
 public:
  Edge();
  virtual ~Edge();

  Edge(const Edge& from);
  Edge(Edge&& from) noexcept
    : Edge() {
    *this = ::std::move(from);
  }

  inline Edge& operator=(const Edge& from) {
    CopyFrom(from);
    return *this;
  }
  inline Edge& operator=(Edge&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Edge& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Edge* internal_default_instance() {
    return reinterpret_cast<const Edge*>(
               &_Edge_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Edge& a, Edge& b) {
    a.Swap(&b);
  }
  inline void Swap(Edge* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Edge* New() const final {
    return CreateMaybeMessage<Edge>(nullptr);
  }

  Edge* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Edge>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Edge& from);
  void MergeFrom(const Edge& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Edge* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Serializer.Edge";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_navigation_5fcatalog_2eproto);
    return ::descriptor_table_navigation_5fcatalog_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFromFieldNumber = 1,
    kToFieldNumber = 2,
    kWeightFieldNumber = 3,
  };
  // uint32 from = 1;
  void clear_from();
  ::PROTOBUF_NAMESPACE_ID::uint32 from() const;
  void set_from(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // uint32 to = 2;
  void clear_to();
  ::PROTOBUF_NAMESPACE_ID::uint32 to() const;
  void set_to(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // double weight = 3;
  void clear_weight();
  double weight() const;
  void set_weight(double value);

  // @@protoc_insertion_point(class_scope:Serializer.Edge)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 from_;
  ::PROTOBUF_NAMESPACE_ID::uint32 to_;
  double weight_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_navigation_5fcatalog_2eproto;
};
// -------------------------------------------------------------------

class IncidenceList :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Serializer.IncidenceList) */ {
 public:
  IncidenceList();
  virtual ~IncidenceList();

  IncidenceList(const IncidenceList& from);
  IncidenceList(IncidenceList&& from) noexcept
    : IncidenceList() {
    *this = ::std::move(from);
  }

  inline IncidenceList& operator=(const IncidenceList& from) {
    CopyFrom(from);
    return *this;
  }
  inline IncidenceList& operator=(IncidenceList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const IncidenceList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IncidenceList* internal_default_instance() {
    return reinterpret_cast<const IncidenceList*>(
               &_IncidenceList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(IncidenceList& a, IncidenceList& b) {
    a.Swap(&b);
  }
  inline void Swap(IncidenceList* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IncidenceList* New() const final {
    return CreateMaybeMessage<IncidenceList>(nullptr);
  }

  IncidenceList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IncidenceList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const IncidenceList& from);
  void MergeFrom(const IncidenceList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IncidenceList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Serializer.IncidenceList";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_navigation_5fcatalog_2eproto);
    return ::descriptor_table_navigation_5fcatalog_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIncidenceListFieldNumber = 1,
  };
  // repeated uint32 incidence_list = 1;
  int incidence_list_size() const;
  void clear_incidence_list();
  ::PROTOBUF_NAMESPACE_ID::uint32 incidence_list(int index) const;
  void set_incidence_list(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_incidence_list(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      incidence_list() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_incidence_list();

  // @@protoc_insertion_point(class_scope:Serializer.IncidenceList)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > incidence_list_;
  mutable std::atomic<int> _incidence_list_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_navigation_5fcatalog_2eproto;
};
// -------------------------------------------------------------------

class Graph :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Serializer.Graph) */ {
 public:
  Graph();
  virtual ~Graph();

  Graph(const Graph& from);
  Graph(Graph&& from) noexcept
    : Graph() {
    *this = ::std::move(from);
  }

  inline Graph& operator=(const Graph& from) {
    CopyFrom(from);
    return *this;
  }
  inline Graph& operator=(Graph&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Graph& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Graph* internal_default_instance() {
    return reinterpret_cast<const Graph*>(
               &_Graph_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Graph& a, Graph& b) {
    a.Swap(&b);
  }
  inline void Swap(Graph* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Graph* New() const final {
    return CreateMaybeMessage<Graph>(nullptr);
  }

  Graph* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Graph>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Graph& from);
  void MergeFrom(const Graph& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Graph* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Serializer.Graph";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_navigation_5fcatalog_2eproto);
    return ::descriptor_table_navigation_5fcatalog_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEdgesFieldNumber = 1,
    kIncidenceListsFieldNumber = 2,
  };
  // repeated .Serializer.Edge edges = 1;
  int edges_size() const;
  void clear_edges();
  ::Serializer::Edge* mutable_edges(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Serializer::Edge >*
      mutable_edges();
  const ::Serializer::Edge& edges(int index) const;
  ::Serializer::Edge* add_edges();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Serializer::Edge >&
      edges() const;

  // repeated .Serializer.IncidenceList incidence_lists = 2;
  int incidence_lists_size() const;
  void clear_incidence_lists();
  ::Serializer::IncidenceList* mutable_incidence_lists(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Serializer::IncidenceList >*
      mutable_incidence_lists();
  const ::Serializer::IncidenceList& incidence_lists(int index) const;
  ::Serializer::IncidenceList* add_incidence_lists();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Serializer::IncidenceList >&
      incidence_lists() const;

  // @@protoc_insertion_point(class_scope:Serializer.Graph)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Serializer::Edge > edges_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Serializer::IncidenceList > incidence_lists_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_navigation_5fcatalog_2eproto;
};
// -------------------------------------------------------------------

class NavigationSettings :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Serializer.NavigationSettings) */ {
 public:
  NavigationSettings();
  virtual ~NavigationSettings();

  NavigationSettings(const NavigationSettings& from);
  NavigationSettings(NavigationSettings&& from) noexcept
    : NavigationSettings() {
    *this = ::std::move(from);
  }

  inline NavigationSettings& operator=(const NavigationSettings& from) {
    CopyFrom(from);
    return *this;
  }
  inline NavigationSettings& operator=(NavigationSettings&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NavigationSettings& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NavigationSettings* internal_default_instance() {
    return reinterpret_cast<const NavigationSettings*>(
               &_NavigationSettings_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(NavigationSettings& a, NavigationSettings& b) {
    a.Swap(&b);
  }
  inline void Swap(NavigationSettings* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NavigationSettings* New() const final {
    return CreateMaybeMessage<NavigationSettings>(nullptr);
  }

  NavigationSettings* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NavigationSettings>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NavigationSettings& from);
  void MergeFrom(const NavigationSettings& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NavigationSettings* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Serializer.NavigationSettings";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_navigation_5fcatalog_2eproto);
    return ::descriptor_table_navigation_5fcatalog_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBusVelocityFieldNumber = 2,
    kBusWaitTimeFieldNumber = 1,
  };
  // double bus_velocity = 2;
  void clear_bus_velocity();
  double bus_velocity() const;
  void set_bus_velocity(double value);

  // uint32 bus_wait_time = 1;
  void clear_bus_wait_time();
  ::PROTOBUF_NAMESPACE_ID::uint32 bus_wait_time() const;
  void set_bus_wait_time(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:Serializer.NavigationSettings)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  double bus_velocity_;
  ::PROTOBUF_NAMESPACE_ID::uint32 bus_wait_time_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_navigation_5fcatalog_2eproto;
};
// -------------------------------------------------------------------

class EdgeInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Serializer.EdgeInfo) */ {
 public:
  EdgeInfo();
  virtual ~EdgeInfo();

  EdgeInfo(const EdgeInfo& from);
  EdgeInfo(EdgeInfo&& from) noexcept
    : EdgeInfo() {
    *this = ::std::move(from);
  }

  inline EdgeInfo& operator=(const EdgeInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline EdgeInfo& operator=(EdgeInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EdgeInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EdgeInfo* internal_default_instance() {
    return reinterpret_cast<const EdgeInfo*>(
               &_EdgeInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(EdgeInfo& a, EdgeInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(EdgeInfo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EdgeInfo* New() const final {
    return CreateMaybeMessage<EdgeInfo>(nullptr);
  }

  EdgeInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EdgeInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EdgeInfo& from);
  void MergeFrom(const EdgeInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EdgeInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Serializer.EdgeInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_navigation_5fcatalog_2eproto);
    return ::descriptor_table_navigation_5fcatalog_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBusFieldNumber = 1,
    kSpanCountFieldNumber = 2,
  };
  // string bus = 1;
  void clear_bus();
  const std::string& bus() const;
  void set_bus(const std::string& value);
  void set_bus(std::string&& value);
  void set_bus(const char* value);
  void set_bus(const char* value, size_t size);
  std::string* mutable_bus();
  std::string* release_bus();
  void set_allocated_bus(std::string* bus);

  // uint32 span_count = 2;
  void clear_span_count();
  ::PROTOBUF_NAMESPACE_ID::uint32 span_count() const;
  void set_span_count(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:Serializer.EdgeInfo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bus_;
  ::PROTOBUF_NAMESPACE_ID::uint32 span_count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_navigation_5fcatalog_2eproto;
};
// -------------------------------------------------------------------

class VertexIds :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Serializer.VertexIds) */ {
 public:
  VertexIds();
  virtual ~VertexIds();

  VertexIds(const VertexIds& from);
  VertexIds(VertexIds&& from) noexcept
    : VertexIds() {
    *this = ::std::move(from);
  }

  inline VertexIds& operator=(const VertexIds& from) {
    CopyFrom(from);
    return *this;
  }
  inline VertexIds& operator=(VertexIds&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const VertexIds& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VertexIds* internal_default_instance() {
    return reinterpret_cast<const VertexIds*>(
               &_VertexIds_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(VertexIds& a, VertexIds& b) {
    a.Swap(&b);
  }
  inline void Swap(VertexIds* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VertexIds* New() const final {
    return CreateMaybeMessage<VertexIds>(nullptr);
  }

  VertexIds* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VertexIds>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VertexIds& from);
  void MergeFrom(const VertexIds& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VertexIds* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Serializer.VertexIds";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_navigation_5fcatalog_2eproto);
    return ::descriptor_table_navigation_5fcatalog_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVertexIdsFieldNumber = 1,
  };
  // repeated uint32 vertex_ids = 1;
  int vertex_ids_size() const;
  void clear_vertex_ids();
  ::PROTOBUF_NAMESPACE_ID::uint32 vertex_ids(int index) const;
  void set_vertex_ids(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_vertex_ids(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      vertex_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_vertex_ids();

  // @@protoc_insertion_point(class_scope:Serializer.VertexIds)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > vertex_ids_;
  mutable std::atomic<int> _vertex_ids_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_navigation_5fcatalog_2eproto;
};
// -------------------------------------------------------------------

class EdgeToVertexIds :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Serializer.EdgeToVertexIds) */ {
 public:
  EdgeToVertexIds();
  virtual ~EdgeToVertexIds();

  EdgeToVertexIds(const EdgeToVertexIds& from);
  EdgeToVertexIds(EdgeToVertexIds&& from) noexcept
    : EdgeToVertexIds() {
    *this = ::std::move(from);
  }

  inline EdgeToVertexIds& operator=(const EdgeToVertexIds& from) {
    CopyFrom(from);
    return *this;
  }
  inline EdgeToVertexIds& operator=(EdgeToVertexIds&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EdgeToVertexIds& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EdgeToVertexIds* internal_default_instance() {
    return reinterpret_cast<const EdgeToVertexIds*>(
               &_EdgeToVertexIds_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(EdgeToVertexIds& a, EdgeToVertexIds& b) {
    a.Swap(&b);
  }
  inline void Swap(EdgeToVertexIds* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EdgeToVertexIds* New() const final {
    return CreateMaybeMessage<EdgeToVertexIds>(nullptr);
  }

  EdgeToVertexIds* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EdgeToVertexIds>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EdgeToVertexIds& from);
  void MergeFrom(const EdgeToVertexIds& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EdgeToVertexIds* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Serializer.EdgeToVertexIds";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_navigation_5fcatalog_2eproto);
    return ::descriptor_table_navigation_5fcatalog_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdToVertexIdsFieldNumber = 1,
  };
  // repeated .Serializer.VertexIds id_to_vertex_ids = 1;
  int id_to_vertex_ids_size() const;
  void clear_id_to_vertex_ids();
  ::Serializer::VertexIds* mutable_id_to_vertex_ids(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Serializer::VertexIds >*
      mutable_id_to_vertex_ids();
  const ::Serializer::VertexIds& id_to_vertex_ids(int index) const;
  ::Serializer::VertexIds* add_id_to_vertex_ids();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Serializer::VertexIds >&
      id_to_vertex_ids() const;

  // @@protoc_insertion_point(class_scope:Serializer.EdgeToVertexIds)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Serializer::VertexIds > id_to_vertex_ids_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_navigation_5fcatalog_2eproto;
};
// -------------------------------------------------------------------

class NavigationDataBase_StopNameToVertexIdEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<NavigationDataBase_StopNameToVertexIdEntry_DoNotUse, 
    std::string, ::PROTOBUF_NAMESPACE_ID::uint32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<NavigationDataBase_StopNameToVertexIdEntry_DoNotUse, 
    std::string, ::PROTOBUF_NAMESPACE_ID::uint32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
    0 > SuperType;
  NavigationDataBase_StopNameToVertexIdEntry_DoNotUse();
  NavigationDataBase_StopNameToVertexIdEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const NavigationDataBase_StopNameToVertexIdEntry_DoNotUse& other);
  static const NavigationDataBase_StopNameToVertexIdEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const NavigationDataBase_StopNameToVertexIdEntry_DoNotUse*>(&_NavigationDataBase_StopNameToVertexIdEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), s->size(), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "Serializer.NavigationDataBase.StopNameToVertexIdEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_navigation_5fcatalog_2eproto);
    return ::descriptor_table_navigation_5fcatalog_2eproto.file_level_metadata[7];
  }

  public:
};

// -------------------------------------------------------------------

class NavigationDataBase :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Serializer.NavigationDataBase) */ {
 public:
  NavigationDataBase();
  virtual ~NavigationDataBase();

  NavigationDataBase(const NavigationDataBase& from);
  NavigationDataBase(NavigationDataBase&& from) noexcept
    : NavigationDataBase() {
    *this = ::std::move(from);
  }

  inline NavigationDataBase& operator=(const NavigationDataBase& from) {
    CopyFrom(from);
    return *this;
  }
  inline NavigationDataBase& operator=(NavigationDataBase&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NavigationDataBase& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NavigationDataBase* internal_default_instance() {
    return reinterpret_cast<const NavigationDataBase*>(
               &_NavigationDataBase_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(NavigationDataBase& a, NavigationDataBase& b) {
    a.Swap(&b);
  }
  inline void Swap(NavigationDataBase* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NavigationDataBase* New() const final {
    return CreateMaybeMessage<NavigationDataBase>(nullptr);
  }

  NavigationDataBase* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NavigationDataBase>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NavigationDataBase& from);
  void MergeFrom(const NavigationDataBase& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NavigationDataBase* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Serializer.NavigationDataBase";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_navigation_5fcatalog_2eproto);
    return ::descriptor_table_navigation_5fcatalog_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kStopNameToVertexIdFieldNumber = 2,
    kVertexIdToStopNameFieldNumber = 3,
    kEdgeIdToEdgeInfoFieldNumber = 4,
    kSettingsFieldNumber = 1,
    kRoadsGraphFieldNumber = 5,
    kEdgeIdToVertexIdsFieldNumber = 6,
  };
  // map<string, uint32> stop_name_to_vertex_id = 2;
  int stop_name_to_vertex_id_size() const;
  void clear_stop_name_to_vertex_id();
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::uint32 >&
      stop_name_to_vertex_id() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_stop_name_to_vertex_id();

  // repeated string vertex_id_to_stop_name = 3;
  int vertex_id_to_stop_name_size() const;
  void clear_vertex_id_to_stop_name();
  const std::string& vertex_id_to_stop_name(int index) const;
  std::string* mutable_vertex_id_to_stop_name(int index);
  void set_vertex_id_to_stop_name(int index, const std::string& value);
  void set_vertex_id_to_stop_name(int index, std::string&& value);
  void set_vertex_id_to_stop_name(int index, const char* value);
  void set_vertex_id_to_stop_name(int index, const char* value, size_t size);
  std::string* add_vertex_id_to_stop_name();
  void add_vertex_id_to_stop_name(const std::string& value);
  void add_vertex_id_to_stop_name(std::string&& value);
  void add_vertex_id_to_stop_name(const char* value);
  void add_vertex_id_to_stop_name(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& vertex_id_to_stop_name() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_vertex_id_to_stop_name();

  // repeated .Serializer.EdgeInfo edge_id_to_edge_info = 4;
  int edge_id_to_edge_info_size() const;
  void clear_edge_id_to_edge_info();
  ::Serializer::EdgeInfo* mutable_edge_id_to_edge_info(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Serializer::EdgeInfo >*
      mutable_edge_id_to_edge_info();
  const ::Serializer::EdgeInfo& edge_id_to_edge_info(int index) const;
  ::Serializer::EdgeInfo* add_edge_id_to_edge_info();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Serializer::EdgeInfo >&
      edge_id_to_edge_info() const;

  // .Serializer.NavigationSettings settings = 1;
  bool has_settings() const;
  void clear_settings();
  const ::Serializer::NavigationSettings& settings() const;
  ::Serializer::NavigationSettings* release_settings();
  ::Serializer::NavigationSettings* mutable_settings();
  void set_allocated_settings(::Serializer::NavigationSettings* settings);

  // .Serializer.Graph roads_graph = 5;
  bool has_roads_graph() const;
  void clear_roads_graph();
  const ::Serializer::Graph& roads_graph() const;
  ::Serializer::Graph* release_roads_graph();
  ::Serializer::Graph* mutable_roads_graph();
  void set_allocated_roads_graph(::Serializer::Graph* roads_graph);

  // .Serializer.EdgeToVertexIds edge_id_to_vertex_ids = 6;
  bool has_edge_id_to_vertex_ids() const;
  void clear_edge_id_to_vertex_ids();
  const ::Serializer::EdgeToVertexIds& edge_id_to_vertex_ids() const;
  ::Serializer::EdgeToVertexIds* release_edge_id_to_vertex_ids();
  ::Serializer::EdgeToVertexIds* mutable_edge_id_to_vertex_ids();
  void set_allocated_edge_id_to_vertex_ids(::Serializer::EdgeToVertexIds* edge_id_to_vertex_ids);

  // @@protoc_insertion_point(class_scope:Serializer.NavigationDataBase)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      NavigationDataBase_StopNameToVertexIdEntry_DoNotUse,
      std::string, ::PROTOBUF_NAMESPACE_ID::uint32,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
      0 > stop_name_to_vertex_id_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> vertex_id_to_stop_name_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Serializer::EdgeInfo > edge_id_to_edge_info_;
  ::Serializer::NavigationSettings* settings_;
  ::Serializer::Graph* roads_graph_;
  ::Serializer::EdgeToVertexIds* edge_id_to_vertex_ids_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_navigation_5fcatalog_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Edge

// uint32 from = 1;
inline void Edge::clear_from() {
  from_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Edge::from() const {
  // @@protoc_insertion_point(field_get:Serializer.Edge.from)
  return from_;
}
inline void Edge::set_from(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  from_ = value;
  // @@protoc_insertion_point(field_set:Serializer.Edge.from)
}

// uint32 to = 2;
inline void Edge::clear_to() {
  to_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Edge::to() const {
  // @@protoc_insertion_point(field_get:Serializer.Edge.to)
  return to_;
}
inline void Edge::set_to(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  to_ = value;
  // @@protoc_insertion_point(field_set:Serializer.Edge.to)
}

// double weight = 3;
inline void Edge::clear_weight() {
  weight_ = 0;
}
inline double Edge::weight() const {
  // @@protoc_insertion_point(field_get:Serializer.Edge.weight)
  return weight_;
}
inline void Edge::set_weight(double value) {
  
  weight_ = value;
  // @@protoc_insertion_point(field_set:Serializer.Edge.weight)
}

// -------------------------------------------------------------------

// IncidenceList

// repeated uint32 incidence_list = 1;
inline int IncidenceList::incidence_list_size() const {
  return incidence_list_.size();
}
inline void IncidenceList::clear_incidence_list() {
  incidence_list_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IncidenceList::incidence_list(int index) const {
  // @@protoc_insertion_point(field_get:Serializer.IncidenceList.incidence_list)
  return incidence_list_.Get(index);
}
inline void IncidenceList::set_incidence_list(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  incidence_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:Serializer.IncidenceList.incidence_list)
}
inline void IncidenceList::add_incidence_list(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  incidence_list_.Add(value);
  // @@protoc_insertion_point(field_add:Serializer.IncidenceList.incidence_list)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
IncidenceList::incidence_list() const {
  // @@protoc_insertion_point(field_list:Serializer.IncidenceList.incidence_list)
  return incidence_list_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
IncidenceList::mutable_incidence_list() {
  // @@protoc_insertion_point(field_mutable_list:Serializer.IncidenceList.incidence_list)
  return &incidence_list_;
}

// -------------------------------------------------------------------

// Graph

// repeated .Serializer.Edge edges = 1;
inline int Graph::edges_size() const {
  return edges_.size();
}
inline void Graph::clear_edges() {
  edges_.Clear();
}
inline ::Serializer::Edge* Graph::mutable_edges(int index) {
  // @@protoc_insertion_point(field_mutable:Serializer.Graph.edges)
  return edges_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Serializer::Edge >*
Graph::mutable_edges() {
  // @@protoc_insertion_point(field_mutable_list:Serializer.Graph.edges)
  return &edges_;
}
inline const ::Serializer::Edge& Graph::edges(int index) const {
  // @@protoc_insertion_point(field_get:Serializer.Graph.edges)
  return edges_.Get(index);
}
inline ::Serializer::Edge* Graph::add_edges() {
  // @@protoc_insertion_point(field_add:Serializer.Graph.edges)
  return edges_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Serializer::Edge >&
Graph::edges() const {
  // @@protoc_insertion_point(field_list:Serializer.Graph.edges)
  return edges_;
}

// repeated .Serializer.IncidenceList incidence_lists = 2;
inline int Graph::incidence_lists_size() const {
  return incidence_lists_.size();
}
inline void Graph::clear_incidence_lists() {
  incidence_lists_.Clear();
}
inline ::Serializer::IncidenceList* Graph::mutable_incidence_lists(int index) {
  // @@protoc_insertion_point(field_mutable:Serializer.Graph.incidence_lists)
  return incidence_lists_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Serializer::IncidenceList >*
Graph::mutable_incidence_lists() {
  // @@protoc_insertion_point(field_mutable_list:Serializer.Graph.incidence_lists)
  return &incidence_lists_;
}
inline const ::Serializer::IncidenceList& Graph::incidence_lists(int index) const {
  // @@protoc_insertion_point(field_get:Serializer.Graph.incidence_lists)
  return incidence_lists_.Get(index);
}
inline ::Serializer::IncidenceList* Graph::add_incidence_lists() {
  // @@protoc_insertion_point(field_add:Serializer.Graph.incidence_lists)
  return incidence_lists_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Serializer::IncidenceList >&
Graph::incidence_lists() const {
  // @@protoc_insertion_point(field_list:Serializer.Graph.incidence_lists)
  return incidence_lists_;
}

// -------------------------------------------------------------------

// NavigationSettings

// uint32 bus_wait_time = 1;
inline void NavigationSettings::clear_bus_wait_time() {
  bus_wait_time_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 NavigationSettings::bus_wait_time() const {
  // @@protoc_insertion_point(field_get:Serializer.NavigationSettings.bus_wait_time)
  return bus_wait_time_;
}
inline void NavigationSettings::set_bus_wait_time(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  bus_wait_time_ = value;
  // @@protoc_insertion_point(field_set:Serializer.NavigationSettings.bus_wait_time)
}

// double bus_velocity = 2;
inline void NavigationSettings::clear_bus_velocity() {
  bus_velocity_ = 0;
}
inline double NavigationSettings::bus_velocity() const {
  // @@protoc_insertion_point(field_get:Serializer.NavigationSettings.bus_velocity)
  return bus_velocity_;
}
inline void NavigationSettings::set_bus_velocity(double value) {
  
  bus_velocity_ = value;
  // @@protoc_insertion_point(field_set:Serializer.NavigationSettings.bus_velocity)
}

// -------------------------------------------------------------------

// EdgeInfo

// string bus = 1;
inline void EdgeInfo::clear_bus() {
  bus_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& EdgeInfo::bus() const {
  // @@protoc_insertion_point(field_get:Serializer.EdgeInfo.bus)
  return bus_.GetNoArena();
}
inline void EdgeInfo::set_bus(const std::string& value) {
  
  bus_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Serializer.EdgeInfo.bus)
}
inline void EdgeInfo::set_bus(std::string&& value) {
  
  bus_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Serializer.EdgeInfo.bus)
}
inline void EdgeInfo::set_bus(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  bus_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Serializer.EdgeInfo.bus)
}
inline void EdgeInfo::set_bus(const char* value, size_t size) {
  
  bus_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Serializer.EdgeInfo.bus)
}
inline std::string* EdgeInfo::mutable_bus() {
  
  // @@protoc_insertion_point(field_mutable:Serializer.EdgeInfo.bus)
  return bus_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* EdgeInfo::release_bus() {
  // @@protoc_insertion_point(field_release:Serializer.EdgeInfo.bus)
  
  return bus_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void EdgeInfo::set_allocated_bus(std::string* bus) {
  if (bus != nullptr) {
    
  } else {
    
  }
  bus_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), bus);
  // @@protoc_insertion_point(field_set_allocated:Serializer.EdgeInfo.bus)
}

// uint32 span_count = 2;
inline void EdgeInfo::clear_span_count() {
  span_count_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 EdgeInfo::span_count() const {
  // @@protoc_insertion_point(field_get:Serializer.EdgeInfo.span_count)
  return span_count_;
}
inline void EdgeInfo::set_span_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  span_count_ = value;
  // @@protoc_insertion_point(field_set:Serializer.EdgeInfo.span_count)
}

// -------------------------------------------------------------------

// VertexIds

// repeated uint32 vertex_ids = 1;
inline int VertexIds::vertex_ids_size() const {
  return vertex_ids_.size();
}
inline void VertexIds::clear_vertex_ids() {
  vertex_ids_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 VertexIds::vertex_ids(int index) const {
  // @@protoc_insertion_point(field_get:Serializer.VertexIds.vertex_ids)
  return vertex_ids_.Get(index);
}
inline void VertexIds::set_vertex_ids(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  vertex_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:Serializer.VertexIds.vertex_ids)
}
inline void VertexIds::add_vertex_ids(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  vertex_ids_.Add(value);
  // @@protoc_insertion_point(field_add:Serializer.VertexIds.vertex_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
VertexIds::vertex_ids() const {
  // @@protoc_insertion_point(field_list:Serializer.VertexIds.vertex_ids)
  return vertex_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
VertexIds::mutable_vertex_ids() {
  // @@protoc_insertion_point(field_mutable_list:Serializer.VertexIds.vertex_ids)
  return &vertex_ids_;
}

// -------------------------------------------------------------------

// EdgeToVertexIds

// repeated .Serializer.VertexIds id_to_vertex_ids = 1;
inline int EdgeToVertexIds::id_to_vertex_ids_size() const {
  return id_to_vertex_ids_.size();
}
inline void EdgeToVertexIds::clear_id_to_vertex_ids() {
  id_to_vertex_ids_.Clear();
}
inline ::Serializer::VertexIds* EdgeToVertexIds::mutable_id_to_vertex_ids(int index) {
  // @@protoc_insertion_point(field_mutable:Serializer.EdgeToVertexIds.id_to_vertex_ids)
  return id_to_vertex_ids_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Serializer::VertexIds >*
EdgeToVertexIds::mutable_id_to_vertex_ids() {
  // @@protoc_insertion_point(field_mutable_list:Serializer.EdgeToVertexIds.id_to_vertex_ids)
  return &id_to_vertex_ids_;
}
inline const ::Serializer::VertexIds& EdgeToVertexIds::id_to_vertex_ids(int index) const {
  // @@protoc_insertion_point(field_get:Serializer.EdgeToVertexIds.id_to_vertex_ids)
  return id_to_vertex_ids_.Get(index);
}
inline ::Serializer::VertexIds* EdgeToVertexIds::add_id_to_vertex_ids() {
  // @@protoc_insertion_point(field_add:Serializer.EdgeToVertexIds.id_to_vertex_ids)
  return id_to_vertex_ids_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Serializer::VertexIds >&
EdgeToVertexIds::id_to_vertex_ids() const {
  // @@protoc_insertion_point(field_list:Serializer.EdgeToVertexIds.id_to_vertex_ids)
  return id_to_vertex_ids_;
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// NavigationDataBase

// .Serializer.NavigationSettings settings = 1;
inline bool NavigationDataBase::has_settings() const {
  return this != internal_default_instance() && settings_ != nullptr;
}
inline void NavigationDataBase::clear_settings() {
  if (GetArenaNoVirtual() == nullptr && settings_ != nullptr) {
    delete settings_;
  }
  settings_ = nullptr;
}
inline const ::Serializer::NavigationSettings& NavigationDataBase::settings() const {
  const ::Serializer::NavigationSettings* p = settings_;
  // @@protoc_insertion_point(field_get:Serializer.NavigationDataBase.settings)
  return p != nullptr ? *p : *reinterpret_cast<const ::Serializer::NavigationSettings*>(
      &::Serializer::_NavigationSettings_default_instance_);
}
inline ::Serializer::NavigationSettings* NavigationDataBase::release_settings() {
  // @@protoc_insertion_point(field_release:Serializer.NavigationDataBase.settings)
  
  ::Serializer::NavigationSettings* temp = settings_;
  settings_ = nullptr;
  return temp;
}
inline ::Serializer::NavigationSettings* NavigationDataBase::mutable_settings() {
  
  if (settings_ == nullptr) {
    auto* p = CreateMaybeMessage<::Serializer::NavigationSettings>(GetArenaNoVirtual());
    settings_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Serializer.NavigationDataBase.settings)
  return settings_;
}
inline void NavigationDataBase::set_allocated_settings(::Serializer::NavigationSettings* settings) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete settings_;
  }
  if (settings) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      settings = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, settings, submessage_arena);
    }
    
  } else {
    
  }
  settings_ = settings;
  // @@protoc_insertion_point(field_set_allocated:Serializer.NavigationDataBase.settings)
}

// map<string, uint32> stop_name_to_vertex_id = 2;
inline int NavigationDataBase::stop_name_to_vertex_id_size() const {
  return stop_name_to_vertex_id_.size();
}
inline void NavigationDataBase::clear_stop_name_to_vertex_id() {
  stop_name_to_vertex_id_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::uint32 >&
NavigationDataBase::stop_name_to_vertex_id() const {
  // @@protoc_insertion_point(field_map:Serializer.NavigationDataBase.stop_name_to_vertex_id)
  return stop_name_to_vertex_id_.GetMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::uint32 >*
NavigationDataBase::mutable_stop_name_to_vertex_id() {
  // @@protoc_insertion_point(field_mutable_map:Serializer.NavigationDataBase.stop_name_to_vertex_id)
  return stop_name_to_vertex_id_.MutableMap();
}

// repeated string vertex_id_to_stop_name = 3;
inline int NavigationDataBase::vertex_id_to_stop_name_size() const {
  return vertex_id_to_stop_name_.size();
}
inline void NavigationDataBase::clear_vertex_id_to_stop_name() {
  vertex_id_to_stop_name_.Clear();
}
inline const std::string& NavigationDataBase::vertex_id_to_stop_name(int index) const {
  // @@protoc_insertion_point(field_get:Serializer.NavigationDataBase.vertex_id_to_stop_name)
  return vertex_id_to_stop_name_.Get(index);
}
inline std::string* NavigationDataBase::mutable_vertex_id_to_stop_name(int index) {
  // @@protoc_insertion_point(field_mutable:Serializer.NavigationDataBase.vertex_id_to_stop_name)
  return vertex_id_to_stop_name_.Mutable(index);
}
inline void NavigationDataBase::set_vertex_id_to_stop_name(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:Serializer.NavigationDataBase.vertex_id_to_stop_name)
  vertex_id_to_stop_name_.Mutable(index)->assign(value);
}
inline void NavigationDataBase::set_vertex_id_to_stop_name(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:Serializer.NavigationDataBase.vertex_id_to_stop_name)
  vertex_id_to_stop_name_.Mutable(index)->assign(std::move(value));
}
inline void NavigationDataBase::set_vertex_id_to_stop_name(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  vertex_id_to_stop_name_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:Serializer.NavigationDataBase.vertex_id_to_stop_name)
}
inline void NavigationDataBase::set_vertex_id_to_stop_name(int index, const char* value, size_t size) {
  vertex_id_to_stop_name_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Serializer.NavigationDataBase.vertex_id_to_stop_name)
}
inline std::string* NavigationDataBase::add_vertex_id_to_stop_name() {
  // @@protoc_insertion_point(field_add_mutable:Serializer.NavigationDataBase.vertex_id_to_stop_name)
  return vertex_id_to_stop_name_.Add();
}
inline void NavigationDataBase::add_vertex_id_to_stop_name(const std::string& value) {
  vertex_id_to_stop_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:Serializer.NavigationDataBase.vertex_id_to_stop_name)
}
inline void NavigationDataBase::add_vertex_id_to_stop_name(std::string&& value) {
  vertex_id_to_stop_name_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:Serializer.NavigationDataBase.vertex_id_to_stop_name)
}
inline void NavigationDataBase::add_vertex_id_to_stop_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  vertex_id_to_stop_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:Serializer.NavigationDataBase.vertex_id_to_stop_name)
}
inline void NavigationDataBase::add_vertex_id_to_stop_name(const char* value, size_t size) {
  vertex_id_to_stop_name_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:Serializer.NavigationDataBase.vertex_id_to_stop_name)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
NavigationDataBase::vertex_id_to_stop_name() const {
  // @@protoc_insertion_point(field_list:Serializer.NavigationDataBase.vertex_id_to_stop_name)
  return vertex_id_to_stop_name_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
NavigationDataBase::mutable_vertex_id_to_stop_name() {
  // @@protoc_insertion_point(field_mutable_list:Serializer.NavigationDataBase.vertex_id_to_stop_name)
  return &vertex_id_to_stop_name_;
}

// repeated .Serializer.EdgeInfo edge_id_to_edge_info = 4;
inline int NavigationDataBase::edge_id_to_edge_info_size() const {
  return edge_id_to_edge_info_.size();
}
inline void NavigationDataBase::clear_edge_id_to_edge_info() {
  edge_id_to_edge_info_.Clear();
}
inline ::Serializer::EdgeInfo* NavigationDataBase::mutable_edge_id_to_edge_info(int index) {
  // @@protoc_insertion_point(field_mutable:Serializer.NavigationDataBase.edge_id_to_edge_info)
  return edge_id_to_edge_info_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Serializer::EdgeInfo >*
NavigationDataBase::mutable_edge_id_to_edge_info() {
  // @@protoc_insertion_point(field_mutable_list:Serializer.NavigationDataBase.edge_id_to_edge_info)
  return &edge_id_to_edge_info_;
}
inline const ::Serializer::EdgeInfo& NavigationDataBase::edge_id_to_edge_info(int index) const {
  // @@protoc_insertion_point(field_get:Serializer.NavigationDataBase.edge_id_to_edge_info)
  return edge_id_to_edge_info_.Get(index);
}
inline ::Serializer::EdgeInfo* NavigationDataBase::add_edge_id_to_edge_info() {
  // @@protoc_insertion_point(field_add:Serializer.NavigationDataBase.edge_id_to_edge_info)
  return edge_id_to_edge_info_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Serializer::EdgeInfo >&
NavigationDataBase::edge_id_to_edge_info() const {
  // @@protoc_insertion_point(field_list:Serializer.NavigationDataBase.edge_id_to_edge_info)
  return edge_id_to_edge_info_;
}

// .Serializer.Graph roads_graph = 5;
inline bool NavigationDataBase::has_roads_graph() const {
  return this != internal_default_instance() && roads_graph_ != nullptr;
}
inline void NavigationDataBase::clear_roads_graph() {
  if (GetArenaNoVirtual() == nullptr && roads_graph_ != nullptr) {
    delete roads_graph_;
  }
  roads_graph_ = nullptr;
}
inline const ::Serializer::Graph& NavigationDataBase::roads_graph() const {
  const ::Serializer::Graph* p = roads_graph_;
  // @@protoc_insertion_point(field_get:Serializer.NavigationDataBase.roads_graph)
  return p != nullptr ? *p : *reinterpret_cast<const ::Serializer::Graph*>(
      &::Serializer::_Graph_default_instance_);
}
inline ::Serializer::Graph* NavigationDataBase::release_roads_graph() {
  // @@protoc_insertion_point(field_release:Serializer.NavigationDataBase.roads_graph)
  
  ::Serializer::Graph* temp = roads_graph_;
  roads_graph_ = nullptr;
  return temp;
}
inline ::Serializer::Graph* NavigationDataBase::mutable_roads_graph() {
  
  if (roads_graph_ == nullptr) {
    auto* p = CreateMaybeMessage<::Serializer::Graph>(GetArenaNoVirtual());
    roads_graph_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Serializer.NavigationDataBase.roads_graph)
  return roads_graph_;
}
inline void NavigationDataBase::set_allocated_roads_graph(::Serializer::Graph* roads_graph) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete roads_graph_;
  }
  if (roads_graph) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      roads_graph = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, roads_graph, submessage_arena);
    }
    
  } else {
    
  }
  roads_graph_ = roads_graph;
  // @@protoc_insertion_point(field_set_allocated:Serializer.NavigationDataBase.roads_graph)
}

// .Serializer.EdgeToVertexIds edge_id_to_vertex_ids = 6;
inline bool NavigationDataBase::has_edge_id_to_vertex_ids() const {
  return this != internal_default_instance() && edge_id_to_vertex_ids_ != nullptr;
}
inline void NavigationDataBase::clear_edge_id_to_vertex_ids() {
  if (GetArenaNoVirtual() == nullptr && edge_id_to_vertex_ids_ != nullptr) {
    delete edge_id_to_vertex_ids_;
  }
  edge_id_to_vertex_ids_ = nullptr;
}
inline const ::Serializer::EdgeToVertexIds& NavigationDataBase::edge_id_to_vertex_ids() const {
  const ::Serializer::EdgeToVertexIds* p = edge_id_to_vertex_ids_;
  // @@protoc_insertion_point(field_get:Serializer.NavigationDataBase.edge_id_to_vertex_ids)
  return p != nullptr ? *p : *reinterpret_cast<const ::Serializer::EdgeToVertexIds*>(
      &::Serializer::_EdgeToVertexIds_default_instance_);
}
inline ::Serializer::EdgeToVertexIds* NavigationDataBase::release_edge_id_to_vertex_ids() {
  // @@protoc_insertion_point(field_release:Serializer.NavigationDataBase.edge_id_to_vertex_ids)
  
  ::Serializer::EdgeToVertexIds* temp = edge_id_to_vertex_ids_;
  edge_id_to_vertex_ids_ = nullptr;
  return temp;
}
inline ::Serializer::EdgeToVertexIds* NavigationDataBase::mutable_edge_id_to_vertex_ids() {
  
  if (edge_id_to_vertex_ids_ == nullptr) {
    auto* p = CreateMaybeMessage<::Serializer::EdgeToVertexIds>(GetArenaNoVirtual());
    edge_id_to_vertex_ids_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Serializer.NavigationDataBase.edge_id_to_vertex_ids)
  return edge_id_to_vertex_ids_;
}
inline void NavigationDataBase::set_allocated_edge_id_to_vertex_ids(::Serializer::EdgeToVertexIds* edge_id_to_vertex_ids) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete edge_id_to_vertex_ids_;
  }
  if (edge_id_to_vertex_ids) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      edge_id_to_vertex_ids = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, edge_id_to_vertex_ids, submessage_arena);
    }
    
  } else {
    
  }
  edge_id_to_vertex_ids_ = edge_id_to_vertex_ids;
  // @@protoc_insertion_point(field_set_allocated:Serializer.NavigationDataBase.edge_id_to_vertex_ids)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Serializer

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_navigation_5fcatalog_2eproto
